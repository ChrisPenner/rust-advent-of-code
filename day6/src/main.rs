use std::collections::HashMap;

fn main() {
    simfish2(80);
    simfish2(256);
}

fn simfish(num_days: i64) {
    // let mut fish = vec![3, 4, 3, 1, 2];
    let mut fish = vec![
        1, 4, 1, 1, 1, 1, 5, 1, 1, 5, 1, 4, 2, 5, 1, 2, 3, 1, 1, 1, 1, 5, 4, 2, 1, 1, 3, 1, 1, 1,
        1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 5, 1, 4, 1, 1,
        4, 1, 1, 1, 1, 4, 1, 1, 5, 5, 1, 1, 1, 4, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 2, 3, 1, 1,
        2, 1, 1, 1, 3, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 3, 1, 1, 1, 3, 3, 5, 1, 4, 1, 1, 5, 1, 1,
        4, 1, 5, 3, 3, 5, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 5, 5, 1, 1, 4, 1, 2, 1, 1, 1, 1, 2, 2, 2,
        1, 1, 2, 2, 4, 1, 1, 1, 1, 3, 1, 2, 3, 4, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1, 4, 2, 5, 2,
        1, 1, 4, 1, 1, 5, 1, 1, 5, 1, 5, 5, 1, 3, 5, 1, 1, 5, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 4,
        3, 1, 1, 4, 1, 4, 1, 1, 1, 1, 4, 1, 4, 4, 4, 3, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 4, 1, 3,
        1, 1, 1, 1, 1, 1, 1, 5, 2, 4, 2, 1, 4, 4, 1, 5, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 4, 2, 3, 2,
        1, 1, 2, 1, 5, 2, 1, 1, 4, 1, 4, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 2, 1, 1, 2,
    ];

    for _ in 0..num_days {
        let mut additions = vec![];
        for v in fish.iter_mut() {
            match *v {
                0 => {
                    *v = 6;
                    additions.push(8);
                }
                _ => *v = *v - 1,
            }
        }
        fish.append(&mut additions)
    }

    println!("{}", fish.len())
}

fn simfish2(num_days: i64) {
    // let mut fish = vec![3, 4, 3, 1, 2];
    let fish = vec![
        1, 4, 1, 1, 1, 1, 5, 1, 1, 5, 1, 4, 2, 5, 1, 2, 3, 1, 1, 1, 1, 5, 4, 2, 1, 1, 3, 1, 1, 1,
        1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 5, 1, 4, 1, 1,
        4, 1, 1, 1, 1, 4, 1, 1, 5, 5, 1, 1, 1, 4, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 2, 3, 1, 1,
        2, 1, 1, 1, 3, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 3, 1, 1, 1, 3, 3, 5, 1, 4, 1, 1, 5, 1, 1,
        4, 1, 5, 3, 3, 5, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 5, 5, 1, 1, 4, 1, 2, 1, 1, 1, 1, 2, 2, 2,
        1, 1, 2, 2, 4, 1, 1, 1, 1, 3, 1, 2, 3, 4, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1, 4, 2, 5, 2,
        1, 1, 4, 1, 1, 5, 1, 1, 5, 1, 5, 5, 1, 3, 5, 1, 1, 5, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 4,
        3, 1, 1, 4, 1, 4, 1, 1, 1, 1, 4, 1, 4, 4, 4, 3, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 4, 1, 3,
        1, 1, 1, 1, 1, 1, 1, 5, 2, 4, 2, 1, 4, 4, 1, 5, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 4, 2, 3, 2,
        1, 1, 2, 1, 5, 2, 1, 1, 4, 1, 4, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 2, 1, 1, 2,
    ];

    let mut fishmap: HashMap<i64, i64> = fish.iter().fold(HashMap::new(), |mut acc, next| {
        *acc.entry(*next).or_insert(0) += 1;
        acc
    });

    for _ in 0..num_days {
        fishmap = fishmap
            .into_iter()
            .flat_map(|(k, v)| match k {
                0 => vec![(6, v), (8, v)],
                _ => vec![(k - 1, v)],
            })
            .fold(HashMap::new(), |mut acc, (next, v)| {
                *acc.entry(next).or_insert(0) += v;
                acc
            })
    }

    println!("{}", fishmap.into_values().sum::<i64>())
}
